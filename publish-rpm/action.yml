name: 'publish-rpm'
description: 'Publish RPM packages to a YUM/DNF repository'
author: 'tty-pt'

inputs:
  source:
    description: 'Glob for .rpm files to publish'
    required: true
  host:
    description: 'Server hostname'
    required: true
  user:
    description: 'Server user'
    required: true
  ssh_key:
    description: 'Private SSH key'
    required: true
  gpg_key:
    description: 'Private GPG key'
    required: false
    default: ""
  gpg_keyid:
    description: 'Key ID for signing'
    required: false
  gpg_pass:
    description: 'Passphrase for GPG key'
    required: false
  repo_name:
    description: 'Repository name'
    required: false
    default: "ttypt"

runs:
  using: 'composite'
  steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_key }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ inputs.host }} >> ~/.ssh/known_hosts
      shell: bash

    - name: Validate RPM packages
      run: |
        echo "Checking for RPM packages..."
        shopt -s nullglob
        rpm_files=(${{ inputs.source }})
        if [ ${#rpm_files[@]} -eq 0 ]; then
          echo "No RPM packages found"
          echo "SKIP_PUBLISH=true" >> $GITHUB_ENV
        else
          echo "Found ${#rpm_files[@]} RPM package(s)"
        fi
      shell: bash

    - name: Import GPG key
      if: ${{ inputs.gpg_key != '' && env.SKIP_PUBLISH != 'true' }}
      run: |
        echo "${{ inputs.gpg_key }}" | gpg --batch --import
      shell: bash

    - name: Fetch current repo from server
      if: env.SKIP_PUBLISH != 'true'
      run: |
        mkdir -p rpm-repo
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519" \
          ${{ inputs.user }}@${{ inputs.host }}:/var/www/htdocs/rpm/ rpm-repo/ || true
      shell: bash

    - name: Copy RPM packages
      if: env.SKIP_PUBLISH != 'true'
      run: |
        mkdir -p rpm-repo/x86_64
        shopt -s nullglob
        for rpm in ${{ inputs.source }}; do
          if [ -f "$rpm" ]; then
            cp "$rpm" rpm-repo/x86_64/
            echo "Copied: $(basename "$rpm")"
          fi
        done
      shell: bash

    - name: Update repository metadata
      if: env.SKIP_PUBLISH != 'true'
      run: |
        docker run --rm \
          -v $PWD/rpm-repo:/repo \
          -v $HOME/.gnupg:/root/.gnupg \
          fedora:latest sh -c "
            dnf install -y createrepo_c
            cd /repo/x86_64
            createrepo_c .
            if command -v gpg >/dev/null && [ -n '${{ inputs.gpg_keyid }}' ]; then
              gpg --batch --detach-sign --armor -u '${{ inputs.gpg_keyid }}' repodata/repomd.xml || echo 'Signing failed'
            fi"
      shell: bash

    - name: Create repo configuration
      if: env.SKIP_PUBLISH != 'true'
      run: |
        echo "[${{ inputs.repo_name }}]" > rpm-repo/${{ inputs.repo_name }}.repo
        echo "name=${{ inputs.repo_name }} Repository" >> rpm-repo/${{ inputs.repo_name }}.repo
        echo "baseurl=https://tty.pt/rpm/\$basearch" >> rpm-repo/${{ inputs.repo_name }}.repo
        echo "enabled=1" >> rpm-repo/${{ inputs.repo_name }}.repo
        echo "gpgcheck=1" >> rpm-repo/${{ inputs.repo_name }}.repo
        echo "gpgkey=https://tty.pt/rpm/RPM-GPG-KEY-${{ inputs.repo_name }}" >> rpm-repo/${{ inputs.repo_name }}.repo
        sed -i "s/REPO_NAME/${{ inputs.repo_name }}/g" rpm-repo/${{ inputs.repo_name }}.repo
      shell: bash

    - name: Export GPG public key
      if: ${{ inputs.gpg_key != '' && env.SKIP_PUBLISH != 'true' }}
      run: |
        gpg --export --armor "${{ inputs.gpg_keyid }}" > rpm-repo/RPM-GPG-KEY-${{ inputs.repo_name }}
      shell: bash

    - name: Push to server
      if: env.SKIP_PUBLISH != 'true'
      run: |
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519" rpm-repo/ \
          ${{ inputs.user }}@${{ inputs.host }}:/var/www/htdocs/rpm/
        echo "RPM repository published"
      shell: bash

