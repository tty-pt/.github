name: all-in-one

on:
  workflow_call:
    inputs:
      name:
        description: "Package name"
        required: true
        type: string
      deps:
        description: "Comma-separated package deps"
        required: false
        type: string
      targets:
        description: "OS build targets"
        required: false
        default: '["ubuntu-latest", "macos-latest"]'
        type: string
      publish_to:
        description: "Package managers to publish to"
        required: false
        default: "apt,apk,pacman,macos"
        type: string
    secrets:
      HOST:
        required: true
      USER:
        required: true
      SSH_KEY:
        required: true
      GPG_PRIVATE_KEY:
        required: false
      GPG_PASSPHRASE:
        required: false
      GPG_KEYID:
        required: false

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: ${{ fromJSON(inputs.targets) }}
    steps:
      - uses: tty-pt/ci/package@main
        with:
          name: ${{ inputs.name }}
          deps: ${{ inputs.deps }}

  release:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Combine everything for release
        run: |
          mkdir -p release
          # Copy ALL files from all artifacts
          find artifacts -type f -exec cp {} release/ \; 2>/dev/null || true

          # Generate one checksum file for everything
          cd release
          find . -type f -not -name SHA256SUMS | xargs shasum -a 256 > SHA256SUMS

          echo "Release contents:"
          ls -la
        shell: bash

      - uses: tty-pt/ci/release@main
        with:
          files: release/*

  publish:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Determine which artifacts exist
        id: artifacts
        run: |
          # Create a map of which OS builds actually ran
          BUILT_TARGETS=""
          for os in ${{ join(fromJSON(inputs.targets), ' ') }}; do
            echo "Checking if $os was built..."
            BUILT_TARGETS="$BUILT_TARGETS $os"
          done
          echo "built_targets=$BUILT_TARGETS" >> $GITHUB_OUTPUT
          
          # Also set individual flags for each OS
          if [[ " $BUILT_TARGETS " == *" ubuntu-latest "* ]]; then
            echo "linux_built=true" >> $GITHUB_OUTPUT
          fi
          if [[ " $BUILT_TARGETS " == *" macos-latest "* ]]; then
            echo "macos_built=true" >> $GITHUB_OUTPUT
          fi
          if [[ " $BUILT_TARGETS " == *" windows-latest "* ]]; then
            echo "windows_built=true" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Download Linux artifacts
        if: steps.artifacts.outputs.linux_built == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.name }}-Linux
          path: dist-linux

      - name: Download macOS artifacts
        if: steps.artifacts.outputs.macos_built == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.name }}-macOS
          path: dist-macos

      - name: Download Windows artifacts
        if: steps.artifacts.outputs.windows_built == 'true'
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.name }}-Windows
          path: dist-windows

      - name: Verify downloaded artifacts
        run: |
          echo "=== Downloaded Artifacts ==="
          echo "Linux:"
          ls -la dist-linux/ 2>/dev/null || echo "No Linux artifacts (not built or not found)"
          echo ""
          echo "macOS:"
          ls -la dist-macos/ 2>/dev/null || echo "No macOS artifacts (not built or not found)"
          echo ""
          echo "Windows:"
          ls -la dist-windows/ 2>/dev/null || echo "No Windows artifacts (not built or not found)"
        shell: bash

      - name: Publish to APT
        if: contains(inputs.publish_to, 'apt') && steps.artifacts.outputs.linux_built == 'true'
        uses: tty-pt/ci/publish-apt@main
        with:
          source: dist-linux/*.deb
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
          gpg_keyid: ${{ secrets.GPG_KEYID }}

      - name: Publish to APK
        if: contains(inputs.publish_to, 'apk') && steps.artifacts.outputs.linux_built == 'true'
        uses: tty-pt/ci/publish-apk@main
        with:
          source: dist-linux/*.apk
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
          gpg_keyid: ${{ secrets.GPG_KEYID }}

      - name: Publish to Pacman
        if: contains(inputs.publish_to, 'pacman') && steps.artifacts.outputs.linux_built == 'true'
        uses: tty-pt/ci/publish-pacman@main
        with:
          source: dist-linux/*.pkg.tar.*
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
          gpg_keyid: ${{ secrets.GPG_KEYID }}

      - name: Publish to macOS
        if: contains(inputs.publish_to, 'macos') && steps.artifacts.outputs.macos_built == 'true'
        uses: tty-pt/ci/publish-macos@main
        with:
          source: dist-macos/*
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
          gpg_keyid: ${{ secrets.GPG_KEYID }}
