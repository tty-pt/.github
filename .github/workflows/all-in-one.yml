name: all-in-one

on:
  workflow_call:
    inputs:
      name:
        description: "Package name"
        required: true
        type: string
      deps:
        description: "Comma-separated package deps"
        required: false
        type: string
      targets:
        description: "OS build targets"
        required: false
        default: '["ubuntu-latest", "macos-latest"]'
        type: string
      publish_to:
        description: "Package managers to publish to"
        required: false
        default: "deb,apk,pacman,rpm,macos"
        type: string
      repo_name:
        description: "Repository name for pacman and RPM"
        required: false
        default: "ttypt"
        type: string
    secrets:
      HOST:
        required: true
      USER:
        required: true
      SSH_KEY:
        required: true
      GPG_PRIVATE_KEY:
        required: false
      GPG_PASSPHRASE:
        required: false
      GPG_KEYID:
        required: false
      ABUILD_PRIVATE_KEY:
        required: false
      ABUILD_PUBLIC_KEY:
        required: false

jobs:
  package-any-deb:
    if: contains(inputs.publish_to, 'deb')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tty-pt/ubuntu-builder:latest
    steps:
    - name: Package APT
      uses: tty-pt/ci/package-any@main
      with:
        name: ${{ inputs.name }}
        format: 'deb'
        deps: ${{ inputs.deps }}
        gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
        gpg_keyid: ${{ secrets.GPG_KEYID }}

  package-any-apk:
    if: contains(inputs.publish_to, 'apk')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tty-pt/alpine-builder:latest
    steps:
    - name: Package APK
      uses: tty-pt/ci/package-any@main
      with:
        name: ${{ inputs.name }}
        format: 'apk'
        deps: ${{ inputs.deps }}
        abuild_key: ${{ secrets.ABUILD_PRIVATE_KEY }}
        abuild_pub: ${{ secrets.ABUILD_PUBLIC_KEY }}

  package-any-pacman:
    if: contains(inputs.publish_to, 'pacman')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tty-pt/arch-builder:latest
    steps:
    - name: Package PACMAN
      uses: tty-pt/ci/package-any@main
      with:
        name: ${{ inputs.name }}
        format: 'pacman'
        ext: 'pkg.tar.zst'
        deps: ${{ inputs.deps }}
        gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
        gpg_keyid: ${{ secrets.GPG_KEYID }}

  package-any-rpm:
    if: contains(inputs.publish_to, 'rpm')
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/tty-pt/rocky-builder:latest
    steps:
    - name: Package RPM
      uses: tty-pt/ci/package-any@main
      with:
        name: ${{ inputs.name }}
        format: 'rpm'
        deps: ${{ inputs.deps }}
        gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
        gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
        gpg_keyid: ${{ secrets.GPG_KEYID }}

  package-any-macos:
    if: contains(inputs.publish_to, 'macos')
    runs-on: macos-latest
    steps:
    - name: Package macOS
      uses: tty-pt/ci/package-any@main
      with:
        name: ${{ inputs.name }}
        format: 'macos'

  release:
    runs-on: ubuntu-latest
    needs:
      - package-any-pacman
      - package-any-rpm
      - package-any-apk
      - package-any-deb
      - package-any-macos
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: release/
      
      - name: Create and publish GitHub Release
        uses: tty-pt/ci/release@main

  publish-any-deb:
    if: contains(inputs.publish_to, 'deb')
    runs-on: ubuntu-latest
    needs: [package-any-deb]
    steps:
      - name: Download DEB artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ inputs.name }}-deb
          path: dist-deb

      - name: Publish APT repository
        uses: tty-pt/ci/publish-any@main
        with:
          format: 'deb'
          source: 'dist-deb/*.deb'
          host: ${{ secrets.HOST }}
          user: ${{ secrets.USER }}
          ssh_key: ${{ secrets.SSH_KEY }}
          gpg_key: ${{ secrets.GPG_PRIVATE_KEY }}
          gpg_keyid: ${{ secrets.GPG_KEYID }}
          gpg_pass: ${{ secrets.GPG_PASSPHRASE }}
