name: 'package-pacman'
description: 'Package ./stage into a .pkg.tar.zst using makepkg (signed if GPG is provided)'
author: 'tty-pt'

inputs:
  name:
    description: 'Package name'
    required: true
  deps:
    description: 'Comma-separated list of runtime dependencies'
    required: false
  prefix:
    description: 'Install prefix (default: /usr/local)'
    required: false
    default: '/usr/local'
  gpg_key:
    description: 'ASCII-armored private GPG key to sign the package'
    required: false
    default: ''
  gpg_keyid:
    description: 'Key ID or fingerprint for signing'
    required: false
    default: ''
  gpg_pass:
    description: 'Passphrase for the GPG key (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout project
      uses: actions/checkout@v4

    - name: Install pacman packaging tools
      run: |
        pacman -Sy --noconfirm base-devel git tar gzip zstd
        if [ -n "${{ inputs.deps }}" ]; then
          pacman -S --noconfirm $(echo "${{ inputs.deps }}" | tr ',' ' ')
        fi
      shell: bash

    - name: Fetch include.mk from tty-pt/mk
      run: |
        git clone --branch main https://github.com/tty-pt/mk ../mk
      shell: bash

    - name: Build
      run: make
      shell: bash

    - name: Install to staging
      run: |
        make DESTDIR=$PWD/stage PREFIX=${{ inputs.prefix }} install
      shell: bash

    - name: Resolve version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF_NAME#v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Generate PKGBUILD
      shell: bash
      run: |
        NAME="${{ inputs.name }}"
        VERSION="${{ steps.version.outputs.version }}"
        PREFIX="${{ inputs.prefix }}"
        mkdir -p dist-pacman

        {
          echo "pkgname=$NAME"
          echo "pkgver=$VERSION"
          echo "pkgrel=1"
          echo "pkgdesc=\"$NAME binary package\""
          echo "arch=('$(uname -m)')"
          echo "url=\"https://github.com/${{ github.repository }}\""
          echo "license=('MIT')"

          if [ -n "${{ inputs.deps }}" ]; then
            echo "depends=($(echo \"${{ inputs.deps }}\" | tr ',' ' '))"
          fi

          echo "source=()"
          echo "sha256sums=()"
          echo ""
          echo "package() {"
          echo "  cp -a \"$PWD/stage/\"* \"\$pkgdir/\""
          echo "}"
        } > PKGBUILD

    - name: Import GPG key (if provided)
      if: inputs.gpg_key != ''
      run: |
        echo "${{ inputs.gpg_key }}" | gpg --batch --import
      shell: bash

    - name: Prepare non-root build user
      run: |
        useradd -m builder
        chown -R builder:builder .
      shell: bash

    - name: Build and optionally sign package
      run: |
        mkdir -p dist-pacman
        sudo -u builder bash -c '
          cd "$PWD"
          makepkg -sf --noconfirm --nodeps
          mkdir -p dist-pacman
          mv *.pkg.tar.* dist-pacman/ || true
        '
        if [ -n "${{ inputs.gpg_key }}" ]; then
          echo "Signing Pacman package..."
          export GPG_TTY=$(tty || true)
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

          for pkg in dist-pacman/*.pkg.tar.*; do
            gpg --batch --yes --pinentry-mode loopback \
              --passphrase "${{ inputs.gpg_pass }}" \
              --detach-sign --armor -u "${{ inputs.gpg_keyid }}" "$pkg"
          done
        fi
      shell: bash

    - name: Upload Pacman artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}-pacman
        path: dist-pacman/*.pkg.tar.*
