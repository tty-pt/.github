name: 'package-any'
description: 'Build and sign packages'
author: 'tty-pt'

inputs:
  name:
    description: 'Package name'
    required: true
  format:
    description: 'PM Format'
    required: true
  ext:
    description: 'Output file extension for this format'
    required: false
    default: ''
  deps:
    description: 'Generic dependencies'
    required: false
  deps_deb:
    description: 'Debian/Ubuntu dependency names'
    required: false
    default: ''
  deps_rpm:
    description: 'Fedora/RHEL dependency names'
    required: false
    default: ''
  deps_apk:
    description: 'Alpine dependency names'
    required: false
    default: ''
  deps_pacman:
    description: 'Arch dependency names'
    required: false
    default: ''
  deps_brew:
    description: 'Brew dependency names'
    required: false
    default: ''
  abuild_key:
    description: 'ABUILD key'
    required: false
    default: ''
  abuild_pub:
    description: 'ABUILD key'
    required: false
    default: ''
  gpg_key:
    description: 'ASCII-armored private GPG key to sign the package'
    required: false
    default: ''
  gpg_keyid:
    description: 'Key ID or fingerprint for signing'
    required: false
    default: ''
  gpg_pass:
    description: 'Passphrase for the GPG key (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4

    - name: Add Repo (APK)
      if: inputs.format == 'apk'
      run: |
        echo "https://dl-cdn.alpinelinux.org/alpine/latest-stable/main" > /etc/apk/repositories
        echo "https://dl-cdn.alpinelinux.org/alpine/latest-stable/community" >> /etc/apk/repositories
        echo "http://tty.pt/apk" >> /etc/apk/repositories

        # Trust tty.pt key to silence 'UNTRUSTED signature'
        mkdir -p /etc/apk/keys
        wget -O /etc/apk/keys/ttypt.rsa.pub https://tty.pt/apk/keys/ttypt.rsa.pub
        chmod 644 /etc/apk/keys/ttypt.rsa.pub

        apk update
      shell: sh

    - name: Add Repo (PACMAN)
      if: inputs.format == 'pacman'
      shell: sh
      run: |
        REPO_NAME="ttypt"
        REPO_CONF="/etc/pacman.conf"
        if ! grep -q "^\[${REPO_NAME}\]" "$REPO_CONF"; then
          {
            echo ""
            echo "[${REPO_NAME}]"
            echo "SigLevel = Never"
            echo "Server = https://tty.pt/pacman/\$arch"
          } | tee -a "$REPO_CONF"
          echo "âœ“ Added custom $REPO_NAME repo to pacman.conf"
        fi
        pacman -Sy --noconfirm || true

    - name: Add Repo (APT)
      if: inputs.format == 'deb'
      run: |
        echo "deb [trusted=yes] http://tty.pt/apt stable main" | sudo tee /etc/apt/sources.list.d/ttypt.list
        sudo apt-get update -y
      shell: sh

    - name: Add Repo (RPM)
      if: inputs.format == 'rpm'
      run: |
        dnf config-manager --set-enabled crb || true
        curl -o /etc/yum.repos.d/ttypt.repo https://tty.pt/rpm/ttypt.repo
        echo "metadata_expire=never" >> /etc/dnf/dnf.conf
        dnf makecache -y
        dnf repolist
      shell: sh

    - name: Add Repo (BREW)
      if: inputs.format == 'brew'
      run: |
        brew tap tty-pt/tap https://github.com/tty-pt/tap.git
        brew update
        brew tap-info tty-pt/tap || true
      shell: sh

    - name: Install prerequisites (APK)
      if: inputs.format == 'apk'
      run: |
        echo "deps='${{ inputs.deps_apk || inputs.deps }}'" > /tmp/env
        . /tmp/env

        apk add --no-cache alpine-sdk abuild git tar gzip fakeroot gnupg shadow
        if [ -n "$deps" ]; then
          echo apk add --no-cache $(echo "$deps" | tr ',' ' ')
          apk add --no-cache $(echo "$deps" | tr ',' ' ')
        fi
      shell: sh

    - name: Install build deps (Linux)
      if: inputs.format == 'deb'
      run: |
        echo "deb [trusted=yes] http://tty.pt/apt stable main" | sudo tee /etc/apt/sources.list.d/ttypt.list
        sudo apt-get update -y
      shell: sh

    - name: Install prerequisites (DEB)
      if: inputs.format == 'deb'
      run: |
        echo "deps='${{ inputs.deps_deb || inputs.deps }}'" > /tmp/env
        . /tmp/env

        sudo rm -f /var/lib/man-db/auto-update
        sudo apt-get install -y dpkg-dev fakeroot gnupg git
        if [ -n "$deps" ]; then
          sudo apt-get install -y $(echo "$deps" | tr ',' ' ')
        fi
      shell: sh

    - name: Install prerequisites (RPM)
      if: inputs.format == 'rpm'
      run: |
        echo "deps='${{ inputs.deps_rpm || inputs.deps }}'" > /tmp/env
        . /tmp/env

        if [ -n "$deps" ]; then
          for dep in $(echo "$deps" | tr ',' ' '); do
            dnf install -y "$dep"
          done
        fi
      shell: sh

    - name: Install prerequisites (PACMAN)
      if: inputs.format == 'pacman'
      run: |
        echo "deps='${{ inputs.deps_pacman || inputs.deps }}'" > /tmp/env
        . /tmp/env

        pacman -Sy --noconfirm base-devel git tar gzip zstd
        if [ -n "$deps" ]; then
          pacman -S --noconfirm $(echo "$deps" | tr ',' ' ')
        fi
      shell: sh

    - name: Install prerequisites (BREW)
      if: inputs.format == 'brew'
      run: |
        echo "deps='${{ inputs.deps_brew || inputs.deps }}'" > /tmp/env
        . /tmp/env

        brew update
        brew install coreutils git bmake || true

        if [ -n "$deps" ]; then
          for dep in $(echo "$deps" | tr ',' ' '); do
            brew install "$dep" || true
            brew list -v "$dep"
          done
        fi
      shell: sh

    - name: Prepare enviroment vars
      run: |
        echo "VERSION=${GITHUB_REF_NAME#v}" >> /tmp/env
        echo "NAME='${{ inputs.name }}'"    >> /tmp/env
        echo "PREFIX=/usr"            >> /tmp/env
      shell: sh

    - name: Prepare builder for APK
      if: inputs.format == 'apk' || inputs.format == 'pacman'
      run: |
        if ! id builder >/dev/null 2>&1; then
          adduser -D builder
        fi
        mkdir -p /home/builder/.abuild
        chown -R builder:builder /home/builder
      shell: sh

    - name: Fetch include.mk from tty-pt/mk
      run: |
        git clone --branch main https://github.com/tty-pt/mk ../mk
      shell: sh

    - name: Build and stage project
      if: inputs.format != 'brew'
      run: |
        . /tmp/env
        export PATH="/usr/bin:/bin:$PATH"

        make
        make DESTDIR=$PWD/stage PREFIX=$PREFIX install
      shell: sh

    - name: Build and stage project
      if: inputs.format == 'brew'
      run: |
        . /tmp/env
        export PATH="/usr/bin:/bin:$PATH"

        bmake
        bmake DESTDIR=$PWD/stage PREFIX=$PREFIX install
      shell: sh

    - name: Loopback GPG entry
      if: inputs.gpg_key != ''
      run: |
          export GPG_TTY=$(tty || true)
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent
          echo "${{ inputs.gpg_key }}" | gpg --batch --yes --import
          echo "%_gpg_name ${{ inputs.gpg_keyid }}" > ~/.rpmmacros
      shell: sh

    - name: Import abuild key
      if: inputs.abuild_key != ''
      run: |
        mkdir -p /home/builder/.abuild
        echo "${{ inputs.abuild_key }}" > /home/builder/.abuild/ttypt.rsa
        chmod 600 /home/builder/.abuild/ttypt.rsa

        echo "${{ inputs.abuild_pub }}" > /home/builder/.abuild/ttypt.rsa.pub
        chmod 644 /home/builder/.abuild/ttypt.rsa.pub

        echo "PACKAGER_PRIVKEY=/home/builder/.abuild/ttypt.rsa" > /home/builder/.abuild/abuild.conf
        echo "PACKAGER='tty.pt repo <repo@tty.pt>'" >> /home/builder/.abuild/abuild.conf
        chown -R builder:builder /home/builder/.abuild
      shell: sh

    - name: Generate PKGBUILD
      if: inputs.format == 'pacman'
      shell: sh
      run: |
        . /tmp/env

        {
          echo "pkgname=$NAME"
          echo "pkgver=$VERSION"
          echo "pkgrel=1"
          echo "pkgdesc=\"$NAME binary package\""
          echo "arch=('$(uname -m)')"
          echo "url=\"https://github.com/${{ github.repository }}\""
          echo "license=('MIT')"

          if [ -n "$deps" ]; then
            echo "depends=($(echo $deps | tr ',' ' '))"
          fi

          echo "source=()"
          echo "sha256sums=()"
          echo ""
          echo "package() {"
          echo "  cp -a \"$PWD/stage/\"* \"\$pkgdir/\""
          echo "}"
        } > PKGBUILD

    - name: Build package (PACMAN)
      if: inputs.format == 'pacman'
      run: |
        mkdir -p dist-pacman
        chown -R builder:builder "$PWD"

        sudo -u builder sh -c '
          cd "$PWD"
          makepkg -sf --noconfirm --nodeps
          mkdir -p dist-pacman
          mv *.pkg.tar.* dist-pacman/ || true
        '
      shell: sh

    - name: Generate APKBUILD
      if: inputs.format == 'apk'
      run: |
        . /tmp/env

        {
          echo "# Maintainer: tty.pt repo <repo@tty.pt>"
          echo "pkgname=$NAME"
          echo "pkgver=$VERSION"
          echo "pkgrel=1"
          echo "pkgdesc=\"$NAME binary package\""
          echo "url=\"https://github.com/${{ github.repository }}\""
          echo "arch=\"$(uname -m)\""
          echo "license=\"MIT\""
          echo "maintainer=\"tty.pt repo <repo@tty.pt>\""
          if [ -n "$deps" ]; then
            echo "depends=\"$(echo $deps | tr ',' ' ')\""
          fi
          echo "source=\"\""
          echo "options=\"!check\""
          echo ""
          echo "package() {"
          echo "  mkdir -p \"\$pkgdir\""
          echo "  cp -a \"$PWD/stage/\"* \"\$pkgdir/\""
          echo "}"
        } > APKBUILD
        
        chown builder:builder APKBUILD
        echo "Generated APKBUILD:"
        cat APKBUILD
      shell: sh

    - name: Build package (APK)
      if: inputs.format == 'apk'
      run: |
        mkdir -p dist-apk
        chown -R builder:builder .
        
        su builder -c '
          cd "$PWD"
          echo "Running abuild"
          export PACKAGER_REPOSITORY=@ttypt
          abuild -r
          
          echo "abuild completed, checking for packages..."
          # Look for packages in multiple possible locations
          if [ -d "/home/builder/packages" ]; then
            echo "Found packages in /home/builder/packages:"
            find /home/builder/packages -name "*.apk" 
            find /home/builder/packages -name "*.apk" -exec cp {} dist-apk/ \;
          fi
          
          echo "Contents of dist-apk:"
          ls -la dist-apk/ || echo "dist-apk directory is empty"
        '
        # Ensure the artifact is accessible to the upload step
        chmod -R 755 dist-apk/
        echo "Final dist-apk contents:"
        ls -la dist-apk/
      shell: sh

    - name: Generate tarball from ./stage
      if: inputs.format == 'rpm'
      run: |
        . /tmp/env

        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

        tar czf ~/rpmbuild/SOURCES/${NAME}-${VERSION}.tar.gz -C stage .
        echo "Created tarball directly from staged install tree."

        mkdir -p ~/rpmbuild/BUILD/${NAME}-${VERSION}
        cp -a stage/* ~/rpmbuild/BUILD/${NAME}-${VERSION}/
        echo "Copied staged files into rpmbuild BUILD context."
      shell: sh

    - name: Generate .spec file
      if: inputs.format == 'rpm'
      run: |
        . /tmp/env

        REPO_URL="https://github.com/${{ github.repository }}"
        DATE="$(date '+%a %b %d %Y')"

        SPEC=~/rpmbuild/SPECS/${NAME}.spec
        {
          echo "%global debug_package %{nil}"
          echo "AutoReqProv: no"
        } > $SPEC

        echo "Name:           $NAME"      >> $SPEC
        echo "Version:        $VERSION"   >> $SPEC
        echo "Release:        1"          >> $SPEC
        echo "Summary:        $NAME binary package" >> $SPEC
        echo "License:        MIT"        >> $SPEC
        echo "URL:            $REPO_URL"  >> $SPEC
        echo "Source0:        %{name}-%{version}.tar.gz" >> $SPEC
        echo "BuildArch: $(uname -m)"     >> $SPEC
        if [ -n "$deps" ]; then
          for dep in $(echo "$deps" | tr ',' ' '); do
            echo "Requires: $dep" >> $SPEC
          done
        fi
        echo "" >> $SPEC
        echo "%description"               >> $SPEC
        echo "Auto-generated package for $NAME." >> $SPEC
        echo ""                           >> $SPEC
        echo "%prep"                      >> $SPEC
        echo ""                           >> $SPEC
        echo "%build"                     >> $SPEC
        echo "# nothing"                  >> $SPEC
        echo ""                           >> $SPEC
        echo "%install"                   >> $SPEC
        echo "mkdir -p %{buildroot}$PREFIX" >> $SPEC
        echo "cp -a %{_builddir}/${NAME}-${VERSION}/$PREFIX/* %{buildroot}$PREFIX/" >> $SPEC
        echo ""                           >> $SPEC
        echo "%files"                     >> $SPEC

        test ! -d stage/usr/lib \
          || echo "$PREFIX/lib/*" >> $SPEC
        test ! -d stage/usr/include \
          || echo "$PREFIX/include/*" >> $SPEC
        test ! -d stage/usr/bin \
          || echo "$PREFIX/bin/*" >> $SPEC

        echo ""                           >> $SPEC
        echo "%changelog"                 >> $SPEC
        echo "* $DATE tty-pt <noreply@github.com> - $VERSION-1" >> $SPEC
        echo "- Auto-generated build"     >> $SPEC
      shell: sh

    - name: Build package (RPM)
      if: inputs.format == 'rpm'
      run: |
        rpmbuild -ba ~/rpmbuild/SPECS/${{ inputs.name }}.spec

        mkdir -p dist-rpm
        cp ~/rpmbuild/RPMS/*/*.rpm dist-rpm/
      shell: sh

    - name: Build package (DEB)
      if: inputs.format == 'deb'
      run: |
        . /tmp/env

        mkdir -p dist-deb

        echo "Building DEB package for $NAME version $VERSION"

        PKGDIR="${PWD}/pkg-${NAME}_${VERSION}"
        mkdir -p "$PKGDIR/DEBIAN"

        cp -a ./stage/* "$PKGDIR/"

        {
          echo "Package: $NAME"
          echo "Version: $VERSION"
          echo "Section: utils"
          echo "Priority: optional"
          echo "Architecture: amd64"
          echo "Maintainer: tty.pt repo <repo@tty.pt>"
          echo "Description: $NAME binary package"
          deps_clean=$(echo "$deps" | tr -d '"' | tr ',' ', ')
          if [ -n "$deps_clean" ]; then
            echo "Depends: $deps_clean"
          fi
        } > "$PKGDIR/DEBIAN/control"

        # Set permissions and build
        chmod -R 755 "$PKGDIR"
        fakeroot dpkg-deb --build "$PKGDIR"
        mv "${PKGDIR}.deb" "dist-deb/${NAME}_${VERSION}_amd64.deb"

        echo "Package built:"
        ls -l dist-deb/
      shell: sh

    - name: Build package (macOS)
      if: inputs.format == 'macos'
      run: |
        . /tmp/env
        ARCH="$(uname -m)"
        mkdir -p dist-macos

        echo "Creating macOS tarball and .pkg installer..."
        tar czf "dist-macos/${NAME}-${VERSION}-macos-${ARCH}.tar.gz" -C stage .

        pkgbuild --root stage \
                 --identifier "com.${{ github.repository_owner }}.${NAME}" \
                 --version "${VERSION}" \
                 --install-location "/usr/local" \
                 "dist-macos/${NAME}-${VERSION}-${ARCH}.pkg"

        echo "Built macOS packages:"
        ls -lh dist-macos/
      shell: sh

    - name: Generate formula (BREW)
      if: inputs.format == 'brew'
      run: |
        . /tmp/env

        ARCH="$(uname -m)"
        mkdir -p dist-brew

        echo "Packaging stage directory..."
        TARBALL="dist-brew/${NAME}-${VERSION}.tar.gz"
        tar czf "$TARBALL" -C stage .

        SHA256=$(shasum -a 256 "$TARBALL" | cut -d' ' -f1)
        FORMULA_PATH="dist-brew/${NAME}.rb"

        CLASS_NAME="$(perl -pe 's/(?:^|_)([a-z])/\u$1/g' <<< "$NAME")"

        {
          echo "class ${CLASS_NAME} < Formula"
          echo "  desc \"$NAME binary package\""
          echo "  homepage \"https://github.com/${{ github.repository }}\""
          echo "  url \"https://github.com/${{ github.repository }}/releases/download/v${VERSION}/${NAME}-${VERSION}.tar.gz\""
          echo "  sha256 \"$SHA256\""
          echo "  version \"$VERSION\""

          # Add dependencies if defined
          if [ -n "$deps" ]; then
            for dep in $(echo "$deps" | tr ',' ' '); do
              echo "  depends_on \"$dep\""
            done
          fi

          echo ""
          echo "  def install"
          echo "    include.install Dir[\"include/*.h\"] if Dir.exist?(\"include\")"
          echo "    lib.install Dir[\"lib/*\"] if Dir.exist?(\"lib\")"
          echo "    bin.install Dir[\"bin/*\"] if Dir.exist?(\"bin\")"
          echo "  end"
          echo ""
          echo "  test do"
          echo "    system \"true\""
          echo "  end"
          echo "end"
        } > "$FORMULA_PATH"

        echo "Generated Homebrew formula:"
        cat "$FORMULA_PATH"
      shell: sh

    - name: Sign package (PACMAN + DEB)
      if: (inputs.format == 'pacman'
        || inputs.format == 'deb')
        && inputs.gpg_key != ''
      run: |
        ext=${{ inputs.ext || inputs.format }}
        for pkg in dist-${{ inputs.format }}/*.$ext; do
          gpg --batch --yes --pinentry-mode loopback \
            --passphrase "${{ inputs.gpg_pass }}" \
            --detach-sign --armor -u "${{ inputs.gpg_keyid }}" "$pkg"
        done
      shell: sh

    - name: Sign package (RPM)
      if: inputs.format == 'rpm' && inputs.gpg_key != ''
      run: |
        rpmsign --define "_gpg_name ${{ inputs.gpg_keyid }}" \
          --define "_gpg_sign_cmd_extra_args --pinentry-mode loopback --passphrase '${{ inputs.gpg_pass }}'" \
          --addsign dist-rpm/*.rpm
      shell: sh

    - name: Sign package (APK)
      if: inputs.format == 'apk' && inputs.abuild_key != ''
      run: |
        su builder -c '
          cd "$PWD"
          for pkg in dist-apk/*.apk; do
            echo "Signing $pkg"
            abuild-sign -k /home/builder/.abuild/ttypt.rsa "$pkg"
          done
        '
      shell: sh

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}-${{ inputs.format }}
        path: dist-${{ inputs.format }}/*
