name: 'package-any'
description: 'Build and sign packages'
author: 'tty-pt'

inputs:
  name:
    description: 'Package name'
    required: true
  format:
    description: 'PM Format'
    required: true
  archs:
    description: 'Architectures to build (macOS only: comma-separated, e.g. "arm64,x86_64")'
    required: false
    default: "arm64,x86_64"
    type: string
  ext:
    description: 'Output file extension for this format'
    required: false
    default: ''
  deps:
    description: 'Generic dependencies'
    required: false
  deps_deb:
    description: 'Debian/Ubuntu dependency names'
    required: false
    default: ''
  deps_rpm:
    description: 'Fedora/RHEL dependency names'
    required: false
    default: ''
  deps_apk:
    description: 'Alpine dependency names'
    required: false
    default: ''
  deps_pacman:
    description: 'Arch dependency names'
    required: false
    default: ''
  deps_brew:
    description: 'Brew dependency names'
    required: false
    default: ''
  deps_openbsd:
    description: 'OpenBSD dependency names'
    required: false
    default: ''
  abuild_key:
    description: 'ABUILD key'
    required: false
    default: ''
  abuild_pub:
    description: 'ABUILD key'
    required: false
    default: ''
  gpg_key:
    description: 'ASCII-armored private GPG key to sign the package'
    required: false
    default: ''
  gpg_keyid:
    description: 'Key ID or fingerprint for signing'
    required: false
    default: ''
  gpg_pass:
    description: 'Passphrase for the GPG key (optional)'
    required: false
    default: ''
  host:
    description: 'Remote server hostname'
    required: true
  user:
    description: 'Remote SSH username'
    required: true
  ssh_key:
    description: 'Private SSH key for upload'
    required: true

runs:
  using: 'composite'
  steps:
    - uses: actions/checkout@v4

    - name: Configure SSH for Host
      if: inputs.format == 'openbsd'
      shell: sh
      run: |
        mkdir -p $HOME/.ssh
        chmod 700 $HOME/.ssh

        echo "${{ inputs.ssh_key }}" > ~/.ssh/id_ed25519
        chmod 600 $HOME/.ssh/id_ed25519

        IP=$(getent hosts "$HOST" | awk '{print $1}' || true)

        ssh-keyscan -H "${{ inputs.host }}" >> "$HOME/.ssh/known_hosts"

        HOSTNAME="${{ inputs.host }}"
        USER="${{ inputs.user }}"

        cat > $HOME/.ssh/config <<EOF
        Host tty.pt
          HostName $HOSTNAME
          User $USER
          IdentityFile $HOME/.ssh/id_ed25519
          IdentitiesOnly yes
          UserKnownHostsFile /dev/null
          StrictHostKeyChecking no
          LogLevel ERROR
          BatchMode yes
          ConnectTimeout 5
        EOF
        chmod 600 $HOME/.ssh/config $HOME/.ssh/known_hosts
        cat $HOME/.ssh/config

        echo "âœ… SSH config prepared for host"

    - name: Prepare enviroment vars
      id: mkenv
      run: |
        echo "VERSION=${GITHUB_REF_NAME#v}" >> $GITHUB_ENV
        echo "PREFIX=/usr" >> $GITHUB_ENV
        arch="$(uname -m)"
        echo "arch=$arch" >> $GITHUB_ENV
        echo "iden=${{ inputs.name }}-${{ inputs.format }}-$arch" >> $GITHUB_ENV
      shell: sh

    - name: Add Repo (APK)
      if: inputs.format == 'apk'
      run: |
        echo "https://dl-cdn.alpinelinux.org/alpine/latest-stable/main" > /etc/apk/repositories
        echo "https://dl-cdn.alpinelinux.org/alpine/latest-stable/community" >> /etc/apk/repositories
        echo "http://tty.pt/apk" >> /etc/apk/repositories

        # Trust tty.pt key to silence 'UNTRUSTED signature'
        mkdir -p /etc/apk/keys
        wget -O /etc/apk/keys/ttypt.rsa.pub https://tty.pt/apk/keys/ttypt.rsa.pub || true
        chmod 644 /etc/apk/keys/ttypt.rsa.pub || true

        apk update || true
      shell: sh

    - name: Add Repo (PACMAN)
      if: inputs.format == 'pacman'
      shell: sh
      run: |
        REPO_NAME="ttypt"
        REPO_CONF="/etc/pacman.conf"
        URL="https://tty.pt/pacman/x86_64/ttypt.db"
        if curl -sSf --http1.1 --ipv4 --connect-timeout 3 --max-time 6 -r 0-0 -o /dev/null "$URL"; then
          {
            echo ""
            echo "[${REPO_NAME}]"
            echo "SigLevel = Never"
            echo "Server = https://tty.pt/pacman/\$arch"
          } | tee -a "$REPO_CONF"
          echo "âœ“ Added custom $REPO_NAME repo to pacman.conf"
        fi
        pacman -Sy --noconfirm

    - name: Add Repo (APT)
      if: inputs.format == 'deb'
      run: |
        echo "deb [trusted=yes] http://tty.pt/deb stable main" | sudo tee /etc/apt/sources.list.d/ttypt.list
        sudo apt-get update -y || true
      shell: sh

    - name: Add Repo (BREW)
      if: inputs.format == 'brew'
      run: |
        brew tap tty-pt/tap https://github.com/tty-pt/tap.git
      shell: sh

    - name: Install prerequisites (APK)
      if: inputs.format == 'apk'
      run: |
        deps="${{ inputs.deps_apk || inputs.deps }}"
        echo "deps=$deps" > $GITHUB_ENV

        if [ -n "$deps" ]; then
          apk add --no-cache $(echo "$deps" | tr ',' ' ')
        fi
      shell: sh

    - name: Install prerequisites (DEB)
      if: inputs.format == 'deb'
      run: |
        deps="${{ inputs.deps_deb || inputs.deps }}"
        echo "deps=$deps" > $GITHUB_ENV

        sudo rm -f /var/lib/man-db/auto-update
        if [ -n "$deps" ]; then
          sudo apt-get install -y $(echo "$deps" | tr ',' ' ')
        fi
      shell: sh

    - name: Install prerequisites (RPM)
      if: inputs.format == 'rpm'
      run: |
        deps="${{ inputs.deps_rpm || inputs.deps }}"
        echo "deps=$deps" > $GITHUB_ENV

        test ! -n "$deps" || microdnf install -y \
                         $(echo "$deps" | tr ',' ' ')
      shell: sh

    - name: Install prerequisites (PACMAN)
      if: inputs.format == 'pacman'
      run: |
        deps="${{ inputs.deps_pacman || inputs.deps }}"
        echo "deps=$deps" > $GITHUB_ENV

        pacman -Sy --noconfirm base-devel git tar gzip zstd
        if [ -n "$deps" ]; then
          pacman -S --noconfirm $(echo "$deps" | tr ',' ' ')
        fi
      shell: sh

    - name: Install prerequisites (BREW)
      if: inputs.format == 'brew'
      run: |
        deps="${{ inputs.deps_brew || inputs.deps }}"
        echo "deps=$deps" > $GITHUB_ENV

        if [ -n "$deps" ]; then
          for dep in $(echo "$deps" | tr ',' ' '); do
            brew install "$dep" || true
            brew list -v "$dep"
          done
        fi
      shell: sh

    - name: Fetch include.mk from tty-pt/mk
      run: |
        git clone --branch main https://github.com/tty-pt/mk ../mk
      shell: sh

    - name: Prep Env (OpenBSD)
      if: inputs.format == 'openbsd'
      shell: sh
      run: |
        deps="${{ inputs.deps_openbsd || inputs.deps }}"
        echo "deps=$deps" >> $GITHUB_ENV

    - name: Package (OpenBSD)
      if: inputs.format == 'openbsd'
      shell: sh
      run: |
        cd ..
        tar czf source.tar.gz ${{ inputs.name }} mk
        scp -F $HOME/.ssh/config source.tar.gz ${{ inputs.host }}:/var/www/var/ci-chroot/usr/src/${{ inputs.name }}.tar.gz
        cd - 2>/dev/null

        ssh -F $HOME/.ssh/config ${{ inputs.host }} doas /usr/local/sbin/ci-chroot <<'EOF'
        set -eu
        REL=$(uname -r)
        ARCH=$(uname -m)
        MY="file:///tmp"
        OFF="https://mirror.leaseweb.com/pub/OpenBSD/$REL/packages/$ARCH/"

        deps="$(echo ${{ env.deps }} | tr ',' ' ')"
        pkg_delete -I $deps || true
        echo "ðŸ“¦ Installing dependencies '$deps'..."
        if test ! -z "$deps"; then
          TRUSTED_PKG_PATH="$MY" PKG_PATH="$OFF" \
            pkg_add -DIu $deps
        fi
        pwd

        cd /usr/src

        rm -rf ${{ inputs.name }} mk stage || true
        mkdir -p ${{ inputs.name }} stage dist-openbsd

        echo "ðŸ“¦ Extracting source archive..."
        tar xzf ${{ inputs.name }}.tar.gz

        cd ${{ inputs.name }}
        pwd

        make
        make DESTDIR=../stage install
        cd ../stage

        pwd
        find usr -type f

        echo "ðŸ§¾ Generating packing list..."
        {
          echo "@comment auto build"
          echo "@cwd /"
          if [ -n "${{ env.deps }}" ]; then
            for dep in $deps; do

              echo DEP $dep >&2
              name="$(pkg_info -f $dep | grep ^@name | awk '{print $2}')"
              cate="$(pkg_info -f $dep | grep ^@comment | awk '{print $2}' | awk -F= '{print $2}')"
              cate="$(echo $cate | awk -F/ '{print $1}')"
              echo "@depend $cate:=:$name"
            done
          fi
          find usr -type f | sort
        } > ../dist-openbsd/PLIST

        cat ../dist-openbsd/PLIST

        echo "ðŸ“¦ Creating OpenBSD package..."

        cat > ../dist-openbsd/DESC <<DESC
        Auto build of ${{ inputs.name }} ${{ env.VERSION }}

        This is an automatically built package.
        DESC

        # Create the package using the staging directory
        pkg_create \
          -B . \
          -f ../dist-openbsd/PLIST \
          -d ../dist-openbsd/DESC \
          -D COMMENT="short description" \
          -D FULLPKGPATH="${{ inputs.name }}" \
          -D MAINTAINER="repo@tty.pt" \
          -p / \
          ../dist-openbsd/${{ inputs.name }}-${{ env.VERSION }}.tgz

        cd ../dist-openbsd/

        signify -S -s /etc/signify/openbsd-76-ttypt.sec \
          -m ${{ inputs.name }}-${{ env.VERSION }}.tgz \
          -x ${{ inputs.name }}-${{ env.VERSION }}.tgz.sig

        echo "âœ… Package built:"
        ls -lh
        EOF

        mkdir ${{ env.iden }}
        scp -F $HOME/.ssh/config ${{ inputs.host }}:/var/www/var/ci-chroot/usr/src/dist-openbsd/${{ inputs.name }}-${{ env.VERSION }}.tgz ${{ env.iden }}/${{ inputs.name }}-${{ env.VERSION }}-${{ inputs.format }}-${{ env.arch }}.tgz

        scp -F $HOME/.ssh/config ${{ inputs.host }}:/var/www/var/ci-chroot/usr/src/dist-openbsd/${{ inputs.name }}-${{ env.VERSION }}.tgz.sig ${{ env.iden }}/${{ inputs.name }}-${{ env.VERSION }}-${{ inputs.format }}-${{ env.arch }}.tgz.sig

    - name: Prepare builder for APK
      if: inputs.format == 'apk' || inputs.format == 'pacman'
      run: |
        if ! id builder >/dev/null 2>&1; then
          adduser -D builder
        fi
        mkdir -p /home/builder/.abuild
        chown -R builder:builder /home/builder
      shell: sh

    - name: Build and stage project
      if: inputs.format != 'brew' && inputs.format != 'openbsd'
      run: |
        export PATH="/usr/bin:/bin:$PATH"

        make
        make DESTDIR=$PWD/stage PREFIX=${{ env.PREFIX }} install
      shell: sh

    - name: Build and stage project
      if: inputs.format == 'brew'
      run: |
        export PATH="/usr/bin:/bin:$PATH"

        arch="$(uname -m)"
        echo "ðŸ”§ Building for architecture: $arch"
        make
        make DESTDIR=$PWD/stage/$arch \
          PREFIX=${{ env.prefix }} install

        mkdir -p ${{ env.iden }}
        TAR="${{ env.iden }}/${{ inputs.name }}-${{ env.VERSION }}-macos-${arch}.tar.gz"
        PKG="${{ env.iden }}/${{ inputs.name }}-${{ env.VERSION }}-macos-${arch}.pkg"

        echo "ðŸ“¦ Creating $TAR"
        tar -czf "$TAR" -C "stage/$arch" .

        echo "ðŸ“¦ Creating $PKG"
        pkgbuild --root "stage/$arch" \
                 --identifier "com.${{ github.repository_owner }}.${{ inputs.name }}.${arch}" \
                 --version "${{ env.VERSION }}" \
                 --install-location "/usr/local" \
                 "$PKG"

        echo "âœ“ Built macOS $arch artifacts:"
        ls -lh "$TAR" "$PKG"
      shell: sh

    - name: Loopback GPG entry
      if: inputs.gpg_key != ''
      run: |
          export GPG_TTY=$(tty || true)
          mkdir -p ~/.gnupg
          chmod 700 ~/.gnupg
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent
          echo "${{ inputs.gpg_key }}" | gpg --batch --yes --import
          echo "%_gpg_name ${{ inputs.gpg_keyid }}" > ~/.rpmmacros
      shell: sh

    - name: Import abuild key
      if: inputs.abuild_key != ''
      run: |
        mkdir -p /home/builder/.abuild
        echo "${{ inputs.abuild_key }}" > /home/builder/.abuild/ttypt.rsa
        chmod 600 /home/builder/.abuild/ttypt.rsa

        echo "${{ inputs.abuild_pub }}" > /home/builder/.abuild/ttypt.rsa.pub
        chmod 644 /home/builder/.abuild/ttypt.rsa.pub

        echo "PACKAGER_PRIVKEY=/home/builder/.abuild/ttypt.rsa" > /home/builder/.abuild/abuild.conf
        echo "PACKAGER='tty.pt repo <repo@tty.pt>'" >> /home/builder/.abuild/abuild.conf
        chown -R builder:builder /home/builder/.abuild
      shell: sh

    - name: Generate PKGBUILD
      if: inputs.format == 'pacman'
      shell: sh
      run: |
        {
          echo "pkgname=${{ inputs.name }}"
          echo "pkgver=${{ env.VERSION }}"
          echo "pkgrel=1"
          echo "pkgdesc=\"${{ inputs.name }} binary package\""
          echo "arch=('$(uname -m)')"
          echo "url=\"https://github.com/${{ github.repository }}\""
          echo "license=('MIT')"

          if [ -n "${{ env.deps }}" ]; then
            echo "depends=($(echo ${{ env.deps }} | tr ',' ' '))"
          fi

          echo "source=()"
          echo "sha256sums=()"
          echo ""
          echo "package() {"
          echo "  cp -a \"$PWD/stage/\"* \"\$pkgdir/\""
          echo "}"
        } > PKGBUILD

    - name: Build package (PACMAN)
      if: inputs.format == 'pacman'
      run: |
        mkdir -p ${{ env.iden }}
        chown -R builder:builder "$PWD"

        sudo -u builder sh -c '
          cd "$PWD"
          makepkg -sf --noconfirm --nodeps
          mkdir -p ${{ env.iden }}
          mv *.pkg.tar.* ${{ env.iden }} || true
        '
      shell: sh

    - name: Generate APKBUILD
      if: inputs.format == 'apk'
      run: |
        {
          echo "# Maintainer: tty.pt repo <repo@tty.pt>"
          echo "pkgname=${{ inputs.name }}"
          echo "pkgver=${{ env.VERSION }}"
          echo "pkgrel=1"
          echo "pkgdesc=\"${{ inputs.name }} binary package\""
          echo "url=\"https://github.com/${{ github.repository }}\""
          echo "arch=\"$(uname -m)\""
          echo "license=\"MIT\""
          echo "maintainer=\"tty.pt repo <repo@tty.pt>\""
          if [ -n "${{ env.deps }}" ]; then
            echo "depends=\"$(echo ${{ env.deps }} | tr ',' ' ')\""
          fi
          echo "source=\"\""
          echo "options=\"!check\""
          echo ""
          echo "package() {"
          echo "  mkdir -p \"\$pkgdir\""
          echo "  cp -a \"$PWD/stage/\"* \"\$pkgdir/\""
          echo "}"
        } > APKBUILD
        
        chown builder:builder APKBUILD
        echo "Generated APKBUILD:"
        cat APKBUILD
      shell: sh

    - name: Build package (APK)
      if: inputs.format == 'apk'
      run: |
        mkdir -p ${{ env.iden }}/${{ env.arch }}
        chown -R builder:builder .
        
        su builder -c '
          cd "$PWD"
          echo "Running abuild"
          export PACKAGER_REPOSITORY=@ttypt
          abuild -r
          
          find /home/builder/packages -name "*.apk" -exec mv {} ${{ env.iden }}/${{ env.arch }} \;
        '
        # Ensure the artifact is accessible to the upload step
        chmod -R 755 ${{ env.iden }}/
      shell: sh

    - name: Generate tarball from ./stage
      if: inputs.format == 'rpm'
      run: |
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

        namever=${{ inputs.name }}-${{ env.VERSION }}
        tar czf ~/rpmbuild/SOURCES/$namever.tar.gz -C stage .
        echo "Created tarball directly from staged install tree."

        mkdir -p ~/rpmbuild/BUILD/$namever
        cp -a stage/* ~/rpmbuild/BUILD/$namever/
        echo "Copied staged files into rpmbuild BUILD context."
      shell: sh

    - name: Generate .spec file
      if: inputs.format == 'rpm'
      run: |
        REPO_URL="https://github.com/${{ github.repository }}"
        DATE="$(date '+%a %b %d %Y')"

        SPEC=~/rpmbuild/SPECS/${{ inputs.name }}.spec
        {
          echo "%global debug_package %{nil}"
          echo "AutoReqProv: no"
        } > $SPEC

        echo "Name:           ${{ inputs.name }}"      >> $SPEC
        echo "Version:        ${{ env.VERSION }}"   >> $SPEC
        echo "Release:        1"          >> $SPEC
        echo "Summary:        ${{ inputs.name }} binary package" >> $SPEC
        echo "License:        MIT"        >> $SPEC
        echo "URL:            $REPO_URL"  >> $SPEC
        echo "Source0:        %{name}-%{version}.tar.gz" >> $SPEC
        echo "BuildArch: $(uname -m)"     >> $SPEC
        if [ -n "${{ env.deps }}" ]; then
          for dep in $(echo "${{ env.deps }}" | tr ',' ' '); do
            echo "Requires: $dep" >> $SPEC
          done
        fi
        echo "" >> $SPEC
        echo "%description"               >> $SPEC
        echo "Auto-generated package for ${{ inputs.name }}." >> $SPEC
        echo ""                           >> $SPEC
        echo "%prep"                      >> $SPEC
        echo ""                           >> $SPEC
        echo "%build"                     >> $SPEC
        echo "# nothing"                  >> $SPEC
        echo ""                           >> $SPEC
        echo "%install"                   >> $SPEC
        echo "mkdir -p %{buildroot}${{ env.PREFIX }}" >> $SPEC
        echo "cp -a %{_builddir}/${{ inputs.name }}-${{ env.VERSION }}/${{ env.PREFIX }}/* %{buildroot}${{ env.PREFIX }}/" >> $SPEC
        echo ""                           >> $SPEC
        echo "%files"                     >> $SPEC

        test ! -d stage/usr/lib \
          || echo "${{ env.PREFIX }}/lib/*" >> $SPEC
        test ! -d stage/usr/include \
          || echo "${{ env.PREFIX }}/include/*" >> $SPEC
        test ! -d stage/usr/bin \
          || echo "${{ env.PREFIX }}/bin/*" >> $SPEC

        echo ""                           >> $SPEC
        echo "%changelog"                 >> $SPEC
        echo "* $DATE tty-pt <noreply@github.com> - ${{ env.VERSION }}-1" >> $SPEC
        echo "- Auto-generated build"     >> $SPEC
      shell: sh

    - name: Build package (RPM)
      if: inputs.format == 'rpm'
      run: |
        rpmbuild -ba ~/rpmbuild/SPECS/${{ inputs.name }}.spec

        mkdir -p ${{ env.iden }}
        cp ~/rpmbuild/RPMS/*/*.rpm ${{ env.iden }}/
      shell: sh

    - name: Build package (DEB)
      if: inputs.format == 'deb'
      run: |
        mkdir -p ${{ env.iden }}

        echo "Building DEB package for ${{ inputs.name }} version ${{ env.VERSION }}"

        PKGDIR="${PWD}/pkg-${{ inputs.name }}_${{ env.VERSION }}"
        mkdir -p "$PKGDIR/DEBIAN"

        cp -a ./stage/* "$PKGDIR/"

        {
          echo "Package: ${{ inputs.name }}"
          echo "Version: ${{ env.VERSION }}"
          echo "Section: utils"
          echo "Priority: optional"
          echo "Architecture: amd64"
          echo "Maintainer: tty.pt repo <repo@tty.pt>"
          echo "Description: ${{ inputs.name }} binary package"
          deps_clean=$(echo "${{ env.deps }}" | tr -d '"' | tr ',' ', ')
          if [ -n "$deps_clean" ]; then
            echo "Depends: $deps_clean"
          fi
        } > "$PKGDIR/DEBIAN/control"

        # Set permissions and build
        chmod -R 755 "$PKGDIR"
        fakeroot dpkg-deb --build "$PKGDIR"
        mv "${PKGDIR}.deb" "${{ env.iden }}/${{ inputs.name }}_${{ env.VERSION }}_amd64.deb"

        echo "Package built:"
        ls -l ${{ env.iden }}/
      shell: sh

    - name: Sign package (PACMAN + DEB)
      if: (inputs.format == 'pacman'
        || inputs.format == 'deb')
        && inputs.gpg_key != ''
      run: |
        ext=${{ inputs.ext || inputs.format }}
        for pkg in ${{ env.iden }}/*.$ext; do
          gpg --batch --yes --pinentry-mode loopback \
            --passphrase "${{ inputs.gpg_pass }}" \
            --detach-sign --armor -u "${{ inputs.gpg_keyid }}" "$pkg"
        done
      shell: sh

    - name: Sign package (RPM)
      if: inputs.format == 'rpm' && inputs.gpg_key != ''
      run: |
        rpmsign --define "_gpg_name ${{ inputs.gpg_keyid }}" \
          --define "_gpg_sign_cmd_extra_args --pinentry-mode loopback --passphrase '${{ inputs.gpg_pass }}'" \
          --addsign ${{ env.iden }}/*.rpm
      shell: sh

    - name: Sign package (APK)
      if: inputs.format == 'apk' && inputs.abuild_key != ''
      run: |
        su builder -c '
          cd "$PWD"
          for pkg in $( find ${{ env.iden }}.-type f ); do
            echo "Signing $pkg"
            abuild-sign -k /home/builder/.abuild/ttypt.rsa "$pkg"
          done
        '
      shell: sh

    - uses: actions/upload-artifact@v4
      with:
        name: ${{ env.iden }}
        path: ${{ env.iden }}/*
