name: 'publish-pacman'
description: 'Publish Pacman packages'
author: 'tty-pt'

inputs:
  source:
    description: 'Glob for .pkg.tar.* files to publish (e.g. dist/*.pkg.tar.*)'
    required: true
  host:
    description: 'Server hostname'
    required: true
  user:
    description: 'Server user'
    required: true
  ssh_key:
    description: 'Private SSH key'
    required: true
  gpg_key:
    description: 'Private GPG key (ASCII-armored)'
    required: false
    default: ""
  gpg_keyid:
    description: 'Key ID or fingerprint to use when signing'
    required: false
  gpg_pass:
    description: 'Passphrase for the GPG key (if any)'
    required: false
  repo_name:
    description: 'Name for the Pacman repository'
    required: false
    default: "ttypt"

runs:
  using: 'composite'
  steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_key }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ inputs.host }} >> ~/.ssh/known_hosts
      shell: bash

    - name: Import GPG key
      if: ${{ inputs.gpg_key != '' }}
      run: |
        echo "${{ inputs.gpg_key }}" | gpg --batch --import
        gpg --list-secret-keys --keyid-format=long
      shell: bash

    - name: Fetch current repo from server
      run: |
        mkdir -p pacman-repo
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
          ${{ inputs.user }}@${{ inputs.host }}:/var/www/htdocs/pacman/ pacman-repo/ || true
      shell: bash

    - name: Install pacman tools via Docker
      run: |
        echo "Setting up Arch Linux environment for repo management..."
      shell: bash

    - name: Merge new packages and update database
      run: |
        mkdir -p pacman-repo/x86_64
        
        # Only copy .pkg.tar.* files
        for pkg in ${{ inputs.source }}; do
          if [ -f "$pkg" ] && [[ "$pkg" == *.pkg.tar.* ]]; then
            echo "Copying Pacman package: $(basename "$pkg")"
            cp "$pkg" pacman-repo/x86_64/
          fi
        done
        
        # Check if we have any packages to process
        PKG_COUNT=$(ls pacman-repo/x86_64/*.pkg.tar.* 2>/dev/null | wc -l)
        if [ "$PKG_COUNT" -eq 0 ]; then
          echo "No Pacman packages found to process"
          exit 0
        fi
        
        echo "Updating Pacman repository database..."
        docker run --rm \
          -v $PWD/pacman-repo:/pacman-repo \
          -v $HOME/.gnupg:/root/.gnupg \
          archlinux:latest sh -c "
            # Update and install required tools
            pacman -Syu --noconfirm pacman-contrib
            
            # Create or update repository database
            cd /pacman-repo/x86_64
            
            # Initialize database if it doesn't exist
            if [ ! -f ${{ inputs.repo_name }}.db.tar.gz ]; then
              echo 'Initializing new repository database...'
              repo-add -s -k '${{ inputs.gpg_keyid }}' ${{ inputs.repo_name }}.db.tar.gz *.pkg.tar.*
            else
              echo 'Updating existing repository database...'
              repo-add -s -k '${{ inputs.gpg_keyid }}' ${{ inputs.repo_name }}.db.tar.gz *.pkg.tar.*
            fi
            
            # Create symlinks for better compatibility
            ln -sf ${{ inputs.repo_name }}.db.tar.gz ${{ inputs.repo_name }}.db
            ln -sf ${{ inputs.repo_name }}.files.tar.gz ${{ inputs.repo_name }}.files
            
            echo 'Repository contents:'
            ls -la /pacman-repo/x86_64/
          "
      shell: bash

    - name: Create repository configuration
      run: |
        mkdir -p pacman-repo
        cat > pacman-repo/${{ inputs.repo_name }}.conf << EOF
        [{{ inputs.repo_name }}]
        SigLevel = Optional TrustAll
        Server = https://tty.pt/pacman/\$arch
        EOF
        
        # Also create a standalone database file for older pacman versions
        cd pacman-repo/x86_64
        if [ -f ${{ inputs.repo_name }}.db.tar.gz ]; then
          tar -xzf ${{ inputs.repo_name }}.db.tar.gz
          # This creates a plain ${{ inputs.repo_name }}.db file that some clients expect
        fi
      shell: bash

    - name: Distribute public key
      if: ${{ inputs.gpg_key != '' }}
      run: |
        # Export GPG public key for clients
        gpg --export --armor "${{ inputs.gpg_keyid }}" > pacman-repo/key.pub
        echo "Public key available at: https://tty.pt/pacman/key.pub"
      shell: bash

    - name: Push repo back to server
      run: |
        echo "Publishing Pacman repository to server..."
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" pacman-repo/ \
          ${{ inputs.user }}@${{ inputs.host }}:/var/www/htdocs/pacman/
        
        echo "Pacman repository published successfully!"
      shell: bash
