name: 'publish-macos'
description: 'Publish macOS packages to distribution directory'
author: 'tty-pt'

inputs:
  source:
    description: 'Glob for macOS artifacts'
    required: true
  host:
    description: 'Server hostname'
    required: true
  user:
    description: 'Server user'
    required: true
  ssh_key:
    description: 'Private SSH key'
    required: true
  gpg_key:
    description: 'Private GPG key (ASCII-armored)'
    required: false
    default: ""
  gpg_keyid:
    description: 'Key ID or fingerprint to use when signing'
    required: false
  gpg_pass:
    description: 'Passphrase for the GPG key (if any)'
    required: false

runs:
  using: 'composite'
  steps:
    - name: Setup SSH
      run: |
        mkdir -p ~/.ssh
        echo "${{ inputs.ssh_key }}" > ~/.ssh/id_ed25519
        chmod 600 ~/.ssh/id_ed25519
        ssh-keyscan -H ${{ inputs.host }} >> ~/.ssh/known_hosts
      shell: bash

    - name: Import GPG key
      if: ${{ inputs.gpg_key != '' }}
      run: |
        echo "${{ inputs.gpg_key }}" | gpg --batch --import
      shell: bash

    - name: Create initial directory structure on server
      run: |
        ssh -i ~/.ssh/id_ed25519 ${{ inputs.user }}@${{ inputs.host }} "
          mkdir -p /var/www/htdocs/macos/{versions,universal,arm64,x86_64} || true
        "
      shell: bash

    - name: Fetch current macOS dist from server
      run: |
        mkdir -p repo
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" \
          ${{ inputs.user }}@${{ inputs.host }}:/var/www/htdocs/macos/ repo/ || echo "Initial sync completed"
      shell: bash

    - name: Create versioned directory structure
      run: |
        mkdir -p repo/versions/$VERSION
        mkdir -p repo/universal
        mkdir -p repo/arm64
        mkdir -p repo/x86_64

        MACOS_COUNT=0
        for artifact in ${{ inputs.source }}; do
          if [ -f "$artifact" ]; then
            filename=$(basename "$artifact")

            # Only process macOS packages
            if [[ "$filename" == *"macos"* ]]; then
              echo "Copying macOS package: $filename"
              cp "$artifact" repo/versions/$VERSION/
              MACOS_COUNT=$((MACOS_COUNT+1))

              # Copy to architecture-specific directories
              if [[ "$filename" == *"universal"* ]]; then
                cp "$artifact" repo/universal/
              elif [[ "$filename" == *"arm64"* ]]; then
                cp "$artifact" repo/arm64/
              elif [[ "$filename" == *"x86_64"* ]]; then
                cp "$artifact" repo/x86_64/
              elif [[ "$filename" == *".pkg"* ]]; then
                cp "$artifact" repo/universal/
              fi
            fi
          fi
        done

        if [ "$MACOS_COUNT" -eq 0 ]; then
          echo "No macOS packages found to publish"
          rm -rf repo/versions/$VERSION
          exit 0
        fi

        echo "Copied $MACOS_COUNT macOS packages"

        # Create checksums for macOS packages only
        cd repo/versions/$VERSION
        shasum -a 256 * > SHA256SUMS

        # Update latest symlink
        cd ../..
        rm -f latest
        ln -sf versions/$VERSION latest
      shell: bash

    - name: Sign checksums with GPG
      if: ${{ inputs.gpg_key != '' }}
      run: |
        cd repo/versions/$VERSION
        if [ -f "SHA256SUMS" ] && [ -s "SHA256SUMS" ]; then
          gpg --batch --yes --detach-sign --armor -u "${{ inputs.gpg_keyid }}" SHA256SUMS
        fi
      shell: bash

    - name: Distribute GPG public key
      if: ${{ inputs.gpg_key != '' }}
      run: |
        gpg --export --armor "${{ inputs.gpg_keyid }}" > repo/key.pub
      shell: bash

    - name: Push to server
      run: |
        echo "Publishing macOS distribution..."
        ssh -i ~/.ssh/id_ed25519 ${{ inputs.user }}@${{ inputs.host }} "
          mkdir -p /var/www/htdocs/macos/{versions,universal,arm64,x86_64}
        "
        
        rsync -avz -e "ssh -i ~/.ssh/id_ed25519 -o StrictHostKeyChecking=no" repo/ \
          ${{ inputs.user }}@${{ inputs.host }}:/var/www/htdocs/macos/
        
        echo "macOS distribution published: https://tty.pt/macos/"
      shell: bash
