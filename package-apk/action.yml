name: 'package-apk'
description: 'Package ./stage into a .apk using abuild (signed if GPG is provided)'
author: 'tty-pt'

inputs:
  name:
    description: 'Package name'
    required: true
  deps:
    description: 'Comma-separated list of runtime dependencies'
    required: false
  gpg_key:
    description: 'ASCII-armored private GPG key to sign the package'
    required: false
    default: ''
  gpg_keyid:
    description: 'Key ID or fingerprint for signing'
    required: false
    default: ''
  gpg_pass:
    description: 'Passphrase for the GPG key (optional)'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout project
      uses: actions/checkout@v4

    - name: Install abuild tools
      run: |
        apk update
        apk add --no-cache alpine-sdk abuild git tar gzip fakeroot gnupg
        if [ -n "${{ inputs.deps }}" ]; then
          apk add --no-cache $(echo "${{ inputs.deps }}" | tr ',' ' ')
        fi
      shell: sh

    - name: Fetch include.mk from tty-pt/mk
      run: |
        git clone --branch main https://github.com/tty-pt/mk ../mk
      shell: sh

    - name: Prepare builder user and environment
      run: |
        adduser -D builder
        addgroup builder abuild
        # Create abuild directory and generate keys
        mkdir -p /home/builder/.abuild
        chown -R builder:builder /home/builder
        
        # Generate abuild keys non-interactively
        su builder -c "cd /tmp && abuild-keygen -n -a"
        
        # Verify keys were created
        echo "Generated keys:"
        ls -la /home/builder/.abuild/
        echo "abuild.conf contents:"
        cat /home/builder/.abuild/abuild.conf
      shell: sh

    - name: Build and stage as builder
      run: |
        chown -R builder:builder .
        su builder -c '
          cd "$PWD"
          make
          make DESTDIR="$PWD/stage" PREFIX=/usr install
        '
      shell: sh

    - name: Resolve version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF_NAME#v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: sh

    - name: Generate APKBUILD
      run: |
        NAME="${{ inputs.name }}"
        VERSION="${{ steps.version.outputs.version }}"
        mkdir -p dist-apk

        {
          echo "# Maintainer: tty.pt repo <repo@tty.pt>"
          echo "pkgname=$NAME"
          echo "pkgver=$VERSION"
          echo "pkgrel=1"
          echo "pkgdesc=\"$NAME binary package\""
          echo "url=\"https://github.com/${{ github.repository }}\""
          echo "arch=\"$(uname -m)\""
          echo "license=\"MIT\""
          echo "maintainer=\"tty.pt repo <repo@tty.pt>\""
          if [ -n "${{ inputs.deps }}" ]; then
            echo "depends=\"$(echo \"${{ inputs.deps }}\" | tr ',' ' ')\""
          fi
          echo "source=\"\""
          echo "options=\"!check\""
          echo ""
          echo "package() {"
          echo "  mkdir -p \"\$pkgdir\""
          echo "  cp -a \"$PWD/stage/\"* \"\$pkgdir/\""
          echo "}"
        } > APKBUILD
        
        chown builder:builder APKBUILD
        echo "Generated APKBUILD:"
        cat APKBUILD
      shell: sh

    - name: Build package
      run: |
        mkdir -p dist-apk
        chown -R builder:builder .
        
        su builder -c '
          cd "$PWD"
          echo "Running abuild without signing..."
          # Force unsigned build
          abuild -rF -k
          
          echo "abuild completed, checking for packages..."
          # Look for packages in multiple possible locations
          if [ -d "/home/builder/packages" ]; then
            echo "Found packages in /home/builder/packages:"
            find /home/builder/packages -name "*.apk" 
            find /home/builder/packages -name "*.apk" -exec cp {} dist-apk/ \;
          fi
          
          echo "Contents of dist-apk:"
          ls -la dist-apk/ || echo "dist-apk directory is empty"
        '
        
        # Ensure the artifact is accessible to the upload step
        chmod -R 755 dist-apk/
        echo "Final dist-apk contents:"
        ls -la dist-apk/
      shell: sh

    - name: Upload APK artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}-apk
        path: dist-apk/*.apk
        if-no-files-found: error
