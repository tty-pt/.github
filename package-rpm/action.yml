name: 'package-rpm'
description: 'Package ./stage into a .rpm using rpmbuild (signed if GPG is provided)'
author: 'tty-pt'

inputs:
  name:
    description: 'Package name'
    required: true
  deps:
    description: 'Comma-separated list of package dependencies'
    required: false
  prefix:
    description: 'Install prefix (default: /usr/local)'
    required: false
    default: '/usr/local'
  gpg_key:
    description: 'ASCII-armored private GPG key to sign the RPM'
    required: false
    default: ''
  gpg_keyid:
    description: 'Key ID (user or fingerprint) to use for signing'
    required: false
    default: ''
  gpg_pass:
    description: 'Key Passphrase'
    required: false
    default: ''

runs:
  using: 'composite'
  steps:
    - name: Checkout project
      uses: actions/checkout@v4

    - name: Install rpmbuild tools
      run: |
        dnf install -y git make gcc rpm-build rpm-sign
        if [ -n "${{ inputs.deps }}" ]; then
          for dep in $(echo "${{ inputs.deps }}" | tr ',' ' '); do
            dnf install -y "$dep"
          done
        fi
      shell: bash

    - name: Fetch include.mk from tty-pt/mk
      run: |
        git clone --branch main https://github.com/tty-pt/mk ../mk
      shell: bash

    - name: Build
      run: make
      shell: bash

    - name: Install to staging
      run: |
        make DESTDIR=$PWD/stage PREFIX=${{ inputs.prefix }} install
      shell: bash

    - name: Resolve version from tag
      id: version
      run: |
        VERSION="${GITHUB_REF_NAME#v}"
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash

    - name: Prepare rpmbuild tree manually
      run: |
        mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}
        mkdir -p dist-rpm
      shell: bash

    - name: Generate tarball from ./stage
      run: |
        NAME="${{ inputs.name }}"
        VERSION="${{ steps.version.outputs.version }}"
        TMPDIR="/tmp/${NAME}-${VERSION}"
        mkdir -p "$TMPDIR"
        cp -a ./stage/* "$TMPDIR/"
        tar czf ~/rpmbuild/SOURCES/${NAME}-${VERSION}.tar.gz -C /tmp ${NAME}-${VERSION}
      shell: bash

    - name: Generate .spec file
      run: |
        NAME="${{ inputs.name }}"
        VERSION="${{ steps.version.outputs.version }}"
        PREFIX="${{ inputs.prefix }}"
        REPO_URL="https://github.com/${{ github.repository }}"
        DATE="$(date "+%a %b %d %Y")"

        SPEC=~/rpmbuild/SPECS/${NAME}.spec
        echo "%global debug_package %{nil}"                   > $SPEC
        echo "Name:           $NAME"                         >> $SPEC
        echo "Version:        $VERSION"                      >> $SPEC
        echo "Release:        1"                             >> $SPEC
        echo "Summary:        $NAME binary package"          >> $SPEC
        echo "License:        MIT"                           >> $SPEC
        echo "URL:            $REPO_URL"                     >> $SPEC
        echo "Source0:        %{name}-%{version}.tar.gz"     >> $SPEC
        echo "BuildArch: $(uname -m)"                        >> $SPEC
        echo ""                                              >> $SPEC
        echo "%description"                                  >> $SPEC
        echo "Auto-generated package for $NAME."             >> $SPEC
        echo ""                                              >> $SPEC
        echo "%prep"                                         >> $SPEC
        echo "%setup -q"                                     >> $SPEC
        echo ""                                              >> $SPEC
        echo "%build"                                        >> $SPEC
        echo "# nothing"                                     >> $SPEC
        echo ""                                              >> $SPEC
        echo "%install"                                      >> $SPEC
        echo "mkdir -p %{buildroot}$PREFIX"                 >> $SPEC
        echo "cp -a * %{buildroot}$PREFIX/"                 >> $SPEC
        echo ""                                              >> $SPEC
        echo "%files"                                        >> $SPEC
        echo "$PREFIX/*"                                     >> $SPEC
        echo ""                                              >> $SPEC
        echo "%changelog"                                    >> $SPEC
        echo "* $DATE tty-pt <noreply@github.com> - $VERSION-1" >> $SPEC
        echo "- Auto-generated build"                        >> $SPEC
      shell: bash

    - name: Import GPG key (if provided)
      if: inputs.gpg_key != ''
      run: |
        echo "${{ inputs.gpg_key }}" | gpg --batch --import
        echo "%_gpg_name ${{ inputs.gpg_keyid }}" > ~/.rpmmacros
      shell: bash

    - name: Build and optionally sign RPM
      run: |
        rpmbuild -ba ~/rpmbuild/SPECS/${{ inputs.name }}.spec
        mkdir -p dist-rpm
        cp ~/rpmbuild/RPMS/*/*.rpm dist-rpm/

        if [ -n "${{ inputs.gpg_key }}" ]; then
          echo "Signing RPM..."
          export GPG_TTY=$(tty || true)
          echo "allow-loopback-pinentry" >> ~/.gnupg/gpg-agent.conf
          gpgconf --kill gpg-agent
          gpgconf --launch gpg-agent

          rpmsign --define "_gpg_name ${{ inputs.gpg_keyid }}" \
            --define "_gpg_sign_cmd_extra_args --pinentry-mode loopback --passphrase '${{ inputs.gpg_pass }}'" \
            --addsign dist-rpm/*.rpm

        fi
      shell: bash

    - name: Upload RPM artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ inputs.name }}-rpm
        path: dist-rpm/*.rpm
